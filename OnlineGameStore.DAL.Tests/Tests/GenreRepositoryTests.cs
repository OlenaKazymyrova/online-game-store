using OnlineGameStore.DAL.Entities;
using OnlineGameStore.DAL.Tests.RepositoryCreators;

namespace OnlineGameStore.DAL.Tests.Tests;

public class GenreRepositoryTests
{
    private readonly GenreRepositoryCreator _creator = new();

    private Genre _testParentGenre;
    private Genre _testChildGenre;

    public GenreRepositoryTests()
    {
        _testParentGenre = new Genre
        {
            // Id will be auto-generated by your property initializer
            Name = "my_cool_parent_genre",
            Description = "cool_desc1",
            ParentId = null,
            ParentGenre = null
        };

        _testChildGenre = new Genre
        {
            Name = "my_cool_child_genre",
            Description = "cool_desc2",
            ParentId = _testParentGenre.Id,
            ParentGenre = _testParentGenre
        };
    }

    private static readonly int _testGenreAmount = 2;

    [Fact]
    public async Task AddAsync_AddsGame()
    {
        var repository = _creator.Create();

        var result = await repository.AddAsync(_testParentGenre);

        Assert.NotNull(result);
        Assert.True(result.Id != Guid.Empty);
        Assert.Equal(_testParentGenre.Name, result.Name);
        Assert.Equal(_testParentGenre.Description, result.Description);
        Assert.Equal(_testParentGenre.ParentId, result.ParentId);
        Assert.Equal(_testParentGenre.ParentGenre, result.ParentGenre);
    }

    [Fact]
    public async Task GetByIdAsync_GenreIsPresent_ReturnsGenre()
    {
        var repository = _creator.Create();

        var genre = await repository.AddAsync(_testParentGenre);

        var result = await repository.GetByIdAsync(_testParentGenre.Id);

        Assert.NotNull(result);
        Assert.NotNull(genre);
        Assert.Equal(result, _testParentGenre);
        Assert.Equal(result, genre);

    }

    [Fact]
    public async Task GetByIdAsync_GenreIsNotPresent_ReturnsNull()
    {
        var repository = _creator.Create();

        var result = await repository.GetByIdAsync(Guid.NewGuid());

        Assert.Null(result);
    }

    [Fact]
    public async Task GetAllAsync_ReturnsAll()
    {
        var repository = _creator.Create();

        await repository.AddAsync(_testParentGenre);
        await repository.AddAsync(_testChildGenre);

        var result = await repository.GetAllAsync();

        Assert.NotNull(result);
        Assert.True(result.Count() == _testGenreAmount);
    }

    [Fact]
    public async Task UpdateAsync_UpdatesGenre()
    {
        var repository = _creator.Create();

        await repository.AddAsync(_testParentGenre);

        var updatedGenre = _testParentGenre;
        updatedGenre.Name = "new_name";
        updatedGenre.Description = "cool_desc2";

        bool result = await repository.UpdateAsync(updatedGenre);

        var changedGenre = await repository.GetByIdAsync(updatedGenre.Id);

        Assert.NotNull(changedGenre);
        Assert.True(result);
        Assert.Equal(updatedGenre, changedGenre);
    }

    [Fact]
    public async Task UpdateAsync_UpdateWithNonExistingParent_Fails()
    {
        var repository = _creator.Create();

        await repository.AddAsync(_testParentGenre);
        var secondAddResult = await repository.AddAsync(_testChildGenre);

        secondAddResult!.ParentId = Guid.NewGuid();

        bool updateResult = await repository.UpdateAsync(secondAddResult);

        Assert.False(updateResult);
    }

    [Fact]
    public async Task UpdateAsync_UpdateNonExistingGenre_Fails()
    {
        var repository = _creator.Create();

        var result = await repository.UpdateAsync(_testParentGenre);

        Assert.False(result);
    }

    [Fact]
    public async Task DeleteAsync_DeletesGenre()
    {
        var repository = _creator.Create();

        await repository.AddAsync(_testParentGenre);

        bool result = await repository.DeleteAsync(_testParentGenre.Id);

        Assert.True(result);
    }

    [Fact]
    public async Task DeleteAsync_DeleteNonExistingGenre_Fails()
    {
        var repository = _creator.Create();

        var result = await repository.DeleteAsync(Guid.NewGuid());

        Assert.False(result);
    }

    [Fact]
    public async Task DeleteAsync_DeleteParent_SetsChildReferenceToNull()
    {
        var repository = _creator.Create();

        // NB: _testGenre2.ParentId = _testGenre1.Id
        await repository.AddAsync(_testParentGenre);
        await repository.AddAsync(_testChildGenre);

        bool result = await repository.DeleteAsync(_testParentGenre.Id);

        var childGenre = await repository.GetByIdAsync(_testChildGenre.Id);

        Assert.NotNull(childGenre);
        Assert.Null(childGenre.ParentId);
        Assert.Null(childGenre.ParentGenre);
    }

    [Fact]
    public async Task DeleteAsync_DeleteChild_NoChangesMadeToParent()
    {
        var repository = _creator.Create();

        await repository.AddAsync(_testParentGenre);
        var childGenre = await repository.AddAsync(_testChildGenre);

        var result = await repository.DeleteAsync(childGenre!.Id);
        var parentGenre = await repository.GetByIdAsync(_testParentGenre.Id);

        Assert.True(result);
        Assert.Equal(parentGenre, _testParentGenre);
    }

    [Fact]
    public async Task AddAsync_MultipleSameGenres_Fails()
    {
        var repository = _creator.Create();

        var firstAddResult = await repository.AddAsync(_testParentGenre);
        var secondAddResult = await repository.AddAsync(firstAddResult!);

        Assert.NotNull(firstAddResult);
        Assert.Null(secondAddResult);
    }

    [Fact]
    public async Task AddAsync_AddGenreWithNonExistingParent_Fails()
    {
        var repository = _creator.Create();


        var result = await repository.AddAsync(_testChildGenre);

        Assert.Null(result);
    }
}




